type = "column", color = "#e5b13a") %>%
hc_add_serie(data = swdata$planets, name = "Planets",
type = "column", color = "#4bd5ee") %>%
hc_title(text = "Diversity in <span style="color:#e5b13a">
STAR WARS</span> movies",
useHTML = TRUE) %>%
hc_credits(enabled = TRUE, text = "Source: SWAPI",
href = "https://swapi.co/",
style = list(fontSize = "12px"))
# chart
highchart() %>%
hc_add_theme(swthm) %>%
hc_xAxis(categories = swdata$title,
title = list(text = "Movie")) %>%
hc_yAxis(title = list(text = "Number")) %>%
hc_add_serie(data = swdata$species, name = "Species",
type = "column", color = "#e5b13a") %>%
hc_add_serie(data = swdata$planets, name = "Planets",
type = "column", color = "#4bd5ee") %>%
hc_title(text = "Diversity in <span style="color:#e5b13a"> STAR WARS</span> movies",
useHTML = TRUE) %>%
hc_credits(enabled = TRUE, text = "Source: SWAPI",
href = "https://swapi.co/",
style = list(fontSize = "12px"))
# chart
highchart() %>%
hc_add_theme(swthm) %>%
hc_xAxis(categories = swdata$title,
title = list(text = "Movie")) %>%
hc_yAxis(title = list(text = "Number")) %>%
hc_add_serie(data = swdata$species, name = "Species",
type = "column", color = "#e5b13a") %>%
hc_add_serie(data = swdata$planets, name = "Planets",
type = "column", color = "#4bd5ee") %>%
hc_title(text = "Diversity in <span style="color:#e5b13a"> STAR WARS</span> movies", useHTML = TRUE) %>%
hc_credits(enabled = TRUE, text = "Source: SWAPI",
href = "https://swapi.co/",
style = list(fontSize = "12px"))
# chart
highchart() %>%
hc_add_theme(swthm) %>%
hc_xAxis(categories = swdata$title,
title = list(text = "Movie")) %>%
hc_yAxis(title = list(text = "Number")) %>%
hc_add_serie(data = swdata$species, name = "Species",
type = "column", color = "#e5b13a") %>%
hc_add_serie(data = swdata$planets, name = "Planets",
type = "column", color = "#4bd5ee") %>%
hc_title(text = "Diversity in <span style="color:#e5b13a">
STAR WARS</span> movies",
useHTML = TRUE) %>%
hc_credits(enabled = TRUE, text = "Source: SWAPI",
href = "https://swapi.co/",
style = list(fontSize = "12px"))
# chart
highchart() %>%
hc_add_theme(swthm) %>%
hc_xAxis(categories = swdata$title,
title = list(text = "Movie")) %>%
hc_yAxis(title = list(text = "Number")) %>%
hc_add_serie(data = swdata$species, name = "Species",
type = "column", color = "#e5b13a") %>%
hc_add_serie(data = swdata$planets, name = "Planets",
type = "column", color = "#4bd5ee") %>%
hc_title(text = "Diversity in STAR WARS movies", useHTML = TRUE) %>%
hc_credits(enabled = TRUE, text = "Source: SWAPI",
href = "https://swapi.co/",
style = list(fontSize = "12px"))
highchart() %>%
hc_title(text = "Monthly Deaths from Lung Diseases in the UK") %>%
hc_add_serie_ts2(fdeaths, name = "Female") %>%
hc_add_serie_ts2(mdeaths, name = "Male")
hcmtcars <- highchart() %>%
hc_title(text = "Motor Trend Car Road Tests") %>%
hc_subtitle(text = "Source: 1974 Motor Trend US magazine") %>%
hc_xAxis(title = list(text = "Weight")) %>%
hc_yAxis(title = list(text = "Miles/gallon")) %>%
hc_chart(zoomType = "xy") %>%
hc_add_serie_scatter(mtcars$wt, mtcars$mpg,
mtcars$drat, mtcars$hp,
rownames(mtcars),
dataLabels = list(
enabled = TRUE,
format = "{point.label}"
)) %>%
hc_tooltip(useHTML = TRUE,
headerFormat = "<table>",
pointFormat = paste("<tr><th colspan="1"><b>{point.label}</b></th></tr>",
"<tr><th>Weight</th><td>{point.x} lb/1000</td></tr>",
"<tr><th>MPG</th><td>{point.y} mpg</td></tr>",
"<tr><th>Drat</th><td>{point.z} </td></tr>",
"<tr><th>HP</th><td>{point.valuecolor} hp</td></tr>"),
footerFormat = "</table>")
hcmtcars
hcmtcars <- highchart() %>%
hc_title(text = "Motor Trend Car Road Tests") %>%
hc_subtitle(text = "Source: 1974 Motor Trend US magazine") %>%
hc_xAxis(title = list(text = "Weight")) %>%
hc_yAxis(title = list(text = "Miles/gallon")) %>%
hc_chart(zoomType = "xy") %>%
hc_add_serie_scatter(mtcars$wt, mtcars$mpg,
mtcars$drat, mtcars$hp,
rownames(mtcars),
dataLabels = list(
enabled = TRUE,
format = "{point.label}"
)) %>%
hc_tooltip(useHTML = TRUE,
headerFormat = "<table>",
pointFormat = paste("<tr><th><b>{point.label}</b></th></tr>",
"<tr><th>Weight</th><td>{point.x} lb/1000</td></tr>",
"<tr><th>MPG</th><td>{point.y} mpg</td></tr>",
"<tr><th>Drat</th><td>{point.z} </td></tr>",
"<tr><th>HP</th><td>{point.valuecolor} hp</td></tr>"),
footerFormat = "</table>")
hcmtcars
install.packages('treemap')
install.packages('treemap')
library("highcharter")
library("magrittr")
library("dplyr")
library("httr")
library("purrr")
install.packages('treemap')
install.packages('viridisLite')
install.packages("viridisLite")
library("highcharter")
library("magrittr")
library("dplyr")
library("httr")
library("purrr")
library("treemap")
install.packages('viridisLite')
install.packages("viridisLite")
library("viridisLite")
data(GNI2010)
tm <- treemap(GNI2010, index = c("continent", "iso3"),
vSize = "population", vColor = "GNI",
type = "value", palette = viridis(6))
hc_tm <- highchart() %>%
hc_add_serie_treemap(tm, allowDrillToNode = TRUE,
layoutAlgorithm = "squarified",
name = "tmdata") %>%
hc_title(text = "Gross National Income World Data") %>%
hc_tooltip(pointFormat = "<b>{point.name}</b>:<br>
Pop: {point.value:,.0f}<br>
GNI: {point.valuecolor:,.0f}")
hc_tm
iriscount <- count(iris, Species)
iriscount
highchart(width = 400, height = 400) %>%
hc_title(text = "Nom! a delicious 3d pie!") %>%
hc_subtitle(text = "your eyes hurt?") %>%
hc_chart(type = "pie", options3d = list(enabled = TRUE, alpha = 70, beta = 0)) %>%
hc_plotOptions(pie = list(depth = 70)) %>%
hc_add_serie_labels_values(iriscount$Species, iriscount$n) %>%
hc_add_theme(hc_theme(
chart = list(
backgroundColor = NULL,
divBackgroundImage = "https://media.giphy.com/media/Yy26NRbpB9lDi/giphy.gif"
)
))
data("favorite_bars")
data("favorite_pies")
highchart() %>%
hc_title(text = "This is a bar graph describing my favorite pies
including a pie chart describing my favorite bars") %>%
hc_subtitle(text = "In percentage of tastiness and awesomeness") %>%
hc_add_serie_labels_values(favorite_pies$pie, favorite_pies$percent, name = "Pie",
colorByPoint = TRUE, type = "column") %>%
hc_add_serie_labels_values(favorite_bars$bar, favorite_bars$percent, type = "pie",
name = "Bar", colorByPoint = TRUE, center = c('35%', '10%'),
size = 100, dataLabels = list(enabled = FALSE)) %>%
hc_yAxis(title = list(text = "percentage of tastiness"),
labels = list(format = "{value}%"), max = 100) %>%
hc_xAxis(categories = favorite_pies$pie) %>%
hc_credits(enabled = TRUE, text = "Source (plz click here!)",
href = "https://www.youtube.com/watch?v=f_J8QU1m0Ng",
style = list(fontSize = "12px")) %>%
hc_legend(enabled = FALSE) %>%
hc_tooltip(pointFormat = "{point.y}%")
?choose
choose(5, 3)
11/300*30*10000
11/300
11/300*15000
550/100
5.5*30
1000*log(1000)
log(1000)
choose(19, 2)
choose(10, 2)
35000*3/5
40000*3/5
55000/2
choose(5, 5)
4/5*3/5*2/5*1/5
599+399+999+799
setwd("D:/Programming/GitHub/Progs")
library(slidify)
library(slidifyLibraries)
slidify('index.Rmd')
publish('Progs', 'IrinaGoloshchapova', host = 'github')
?saveWidget
help(saveWidget, package = 'htmlwidgets')
install.packages('dygraphs')
slidify('index.Rmd')
publish('Progs', 'IrinaGoloshchapova', host = 'github')
10/7
10/7*2.8
slidify('index.Rmd')
publish('Progs', 'IrinaGoloshchapova', host = 'github')
slidify('index.Rmd')
publish('Progs', 'IrinaGoloshchapova', host = 'github')
8.5/7
8.5/7*2.8
slidify('index.Rmd')
publish('Progs', 'IrinaGoloshchapova', host = 'github')
7.5/7
7.5/7*2.8
slidify('index.Rmd')
publish('Progs', 'IrinaGoloshchapova', host = 'github')
?pretty
?digits
?round
slidify('index.Rmd')
publish('Progs', 'IrinaGoloshchapova', host = 'github')
library(plyr)
library(plyr)
dat <- read.csv('http://t.co/mN2RgcyQFc')[,c('date', 'pts')]
dat2 <- transform(dat, date = as.numeric(as.POSIXct(date)))
dat3 <- setNames(as.list(dat2$pts), dat2$date)
library(rChartsCalendar)
r1 <- plotCalMap(
data = dat3,
domain = 'month',
start = "2012-10-27",
legend = seq(10, 50, 10),
itemName = 'point',
range = 7
)
r1$set(width = 700, height = 350)
r1
install.packages('rChartsCalendar')
library(devtools)
install_github("ramnathv/rChartsCalendar")
dat <- read.csv('http://t.co/mN2RgcyQFc')[,c('date', 'pts')]
dat2 <- transform(dat, date = as.numeric(as.POSIXct(date)))
dat3 <- setNames(as.list(dat2$pts), dat2$date)
library(rChartsCalendar)
r1 <- plotCalMap(
data = dat3,
domain = 'month',
start = "2012-10-27",
legend = seq(10, 50, 10),
itemName = 'point',
range = 7
)
r1$set(width = 700, height = 350)
r1
r1 <- plotCalMap(
x = dat3,
domain = 'month',
start = "2012-10-27",
legend = seq(10, 50, 10),
itemName = 'point',
range = 7
)
r1 <- plotCalMap(
data = dat3,
domain = 'month',
start = "2012-10-27",
legend = seq(10, 50, 10),
itemName = 'point',
range = 7
)
dat
dat2
dat3
r1 <- plotCalMap(
data = dat3,
domain = 'month',
start = "2012-10-27",
legend = seq(10, 50, 10),
itemName = 'point',
range = 7
)
names(dat3)
r1 <- plotCalMap(x = 'date', y = 'pts',
data = dat,
domain = 'month',
start = "2012-10-27",
legend = seq(10, 50, 10),
itemName = 'point',
range = 7
)
r1
r1$set(width = 900, height = 350)
r1
install.packages('rjson')
require(rCharts)
require(rjson)
#get source from original example
#this is a JSON, so will need to translate
#this is complicated and unnecessary but feel I need to replicate
#for completeness
#expect most data to come straight from R
#in form of source, target, value
links <- matrix(unlist(
rjson::fromJSON(
file = "http://bost.ocks.org/mike/sankey/energy.json"
)$links
),ncol = 3, byrow = TRUE)
nodes <- unlist(
rjson::fromJSON(
file = "http://bost.ocks.org/mike/sankey/energy.json"
)$nodes
)
#convert to data.frame so souce and target can be character and value numeric
links <- data.frame(links)
colnames(links) <- c("source", "target", "value")
links$source <- sapply(links$source, FUN = function(x) {return(as.character(nodes[x+1]))}) #x+1 since js starts at 0
links$target <- sapply(links$target, FUN = function(x) {return(nodes[x+1])}) #x+1 since js starts at 0
links
#now we finally have the data in the form we need
sankeyPlot <- rCharts$new()
sankeyPlot$setLib('.')
sankeyPlot$setTemplate(script = "layouts/chart.html")
sankeyPlot$set(
data = links,
nodeWidth = 15,
nodePadding = 10,
layout = 32,
width = 960,
height = 500,
units = "TWh",
title = "Sankey Diagram"
)
sankeyPlot
sankeyPlot <- rCharts$new()
sankeyPlot$setLib('.')
sankeyPlot$setTemplate(script = "layouts/chart.html")
sankeyPlot
sankeyPlot$set(
data = links,
nodeWidth = 15,
nodePadding = 10,
layout = 32,
width = 960,
height = 500,
units = "TWh",
title = "Sankey Diagram"
)
sankeyPlot
#now we finally have the data in the form we need
sankeyPlot <- rCharts$new()
sankeyPlot$setLib('http://timelyportfolio.github.io/rCharts_d3_sankey/libraries/widgets/d3_sankey')
sankeyPlot$setTemplate(script = "layouts/chart.html")
sankeyPlot$set(
data = links,
nodeWidth = 15,
nodePadding = 10,
layout = 32,
width = 960,
height = 500,
units = "TWh",
title = "Sankey Diagram"
)
sankeyPlot
sankeyPlot <- rCharts$new()
sankeyPlot$setLib('http://timelyportfolio.github.io/rCharts_d3_sankey/libraries/widgets/d3_sankey')
sankeyPlot$set(
data = links,
nodeWidth = 15,
nodePadding = 10,
layout = 32,
width = 960,
height = 500,
units = "TWh",
title = "Sankey Diagram"
)
sankeyPlot
slidify('index.Rmd')
slidify('index.Rmd')
sankeyplot$save('sankeyplot.html', standalone = TRUE)
sankeyPlot$save('sankeyplot.html', standalone = TRUE)
slidify('index.Rmd')
r1$save('calendar.html', standalone = TRUE)
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
publish('Progs', 'IrinaGoloshchapova', host = 'github')
require(rCharts)
require(rjson)
#get source from original example
#this is a JSON, so will need to translate
#this is complicated and unnecessary but feel I need to replicate
#for completeness
#expect most data to come straight from R
#in form of source, target, value
links <- matrix(unlist(
rjson::fromJSON(
file = "http://bost.ocks.org/mike/sankey/energy.json"
)$links
),ncol = 3, byrow = TRUE)
nodes <- unlist(
rjson::fromJSON(
file = "http://bost.ocks.org/mike/sankey/energy.json"
)$nodes
)
#convert to data.frame so souce and target can be character and value numeric
links <- data.frame(links)
colnames(links) <- c("source", "target", "value")
links$source <- sapply(links$source, FUN = function(x) {return(as.character(nodes[x+1]))}) #x+1 since js starts at 0
links$target <- sapply(links$target, FUN = function(x) {return(nodes[x+1])}) #x+1 since js starts at 0
#now we finally have the data in the form we need
sankeyPlot <- rCharts$new()
sankeyPlot$setLib('http://timelyportfolio.github.io/rCharts_d3_sankey/libraries/widgets/d3_sankey')
sankeyPlot$set(
data = links,
nodeWidth = 15,
nodePadding = 10,
layout = 32,
width = 960,
height = 500,
units = "TWh",
title = "Sankey Diagram"
)
sankeyPlot$save('sankeyplot.html', standalone = TRUE)
sankeyPlot$save('sankeyplot.html', standalone = TRUE)
sankeyPlot
slidify('index.Rmd')
publish('Progs', 'IrinaGoloshchapova', host = 'github')
slidify('index.Rmd')
publish('Progs', 'IrinaGoloshchapova', host = 'github')
library(googleVis)
example("gvisMotionChart")
suppressPackageStartupMessages(library(googleVis))
M1 <- gvisMotionChart(Fruits, idvar="Fruit", timevar="Year")
plot(M1, tag = "chart")
gvisMerge
example(gvisMerge)
G1 <- gvisGeoChart(Exports, "Country", "Profit",
options = list(width = 250, height = 100))
G2 <- gvisTable(Exports, options = list(width=250, height=300))
GT <- gvisMerge(G1, G2, horizontal = FALSE)
column <- gvisColumnChart(OpenClose, "Weekday", c("Open", "Close"),
options=list(legend='none', width=300, height=150))
area <- gvisAreaChart(OpenClose, "Weekday", c("Open", "Close"),
options=list(legend='none', width=300, height=150))
colar <- gvisMerge(column, area, horizontal = FALSE)
p <- gvisMerge(GT, colar, horizontal = TRUE)
plot(p)
G1 <- gvisGeoChart(Exports, "Country", "Profit",
options = list(width = 250, height = 150))
G2 <- gvisTable(Exports, options = list(width=250, height=350))
GT <- gvisMerge(G1, G2, horizontal = FALSE)
column <- gvisColumnChart(OpenClose, "Weekday", c("Open", "Close"),
options=list(legend='none', width=300, height=250))
area <- gvisAreaChart(OpenClose, "Weekday", c("Open", "Close"),
options=list(legend='none', width=300, height=250))
colar <- gvisMerge(column, area, horizontal = FALSE)
p <- gvisMerge(GT, colar, horizontal = TRUE)
plot(p)
G1 <- gvisGeoChart(Exports, "Country", "Profit",
options = list(width = 250, height = 200))
G2 <- gvisTable(Exports, options = list(width=250, height=300))
GT <- gvisMerge(G1, G2, horizontal = FALSE)
column <- gvisColumnChart(OpenClose, "Weekday", c("Open", "Close"),
options=list(legend='none', width=350, height=250))
area <- gvisAreaChart(OpenClose, "Weekday", c("Open", "Close"),
options=list(legend='none', width=350, height=250))
colar <- gvisMerge(column, area, horizontal = FALSE)
p <- gvisMerge(GT, colar, horizontal = TRUE)
plot(p)
G1 <- gvisGeoChart(Exports, "Country", "Profit",
options = list(width = 350, height = 200))
G2 <- gvisTable(Exports, options = list(width=350, height=300))
GT <- gvisMerge(G1, G2, horizontal = FALSE)
column <- gvisColumnChart(OpenClose, "Weekday", c("Open", "Close"),
options=list(legend='none', width=350, height=250))
area <- gvisAreaChart(OpenClose, "Weekday", c("Open", "Close"),
options=list(legend='none', width=350, height=250))
colar <- gvisMerge(column, area, horizontal = FALSE)
p <- gvisMerge(GT, colar, horizontal = TRUE)
plot(p)
p2 <- Reduce(gvisMerge, list(G1, G2, column, area))
plot(p2)
slidify('index.Rmd')
slidify('index.Rmd')
publish('Progs', 'IrinaGoloshchapova', host = 'github')
slidify('index.Rmd')
publish('Progs', 'IrinaGoloshchapova', host = 'github')
slidify('index.Rmd')
publish('Progs', 'IrinaGoloshchapova', host = 'github')
slidify('index.Rmd')
publish('Progs', 'IrinaGoloshchapova', host = 'github')
example(gvisGeoChart)
G1 <- gvisGeoChart(Exports, "Country", "Profit",
options = list(width = 350, height = 200))
G2 <- gvisTable(Exports, options = list(width=350, height=300))
GT <- gvisMerge(G1, G2, horizontal = FALSE)
column <- gvisColumnChart(OpenClose, "Weekday", c("Open", "Close"),
options=list(legend='none', width=350, height=250))
area <- gvisAreaChart(OpenClose, "Weekday", c("Open", "Close"),
options=list(legend='none', width=350, height=250))
colar <- gvisMerge(column, area, horizontal = FALSE)
p <- gvisMerge(GT, colar, horizontal = TRUE)
plot(p)
install.packages('googleVis')

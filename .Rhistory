choose(6, 3)
install.packages('highcharter')
install.packages('magrittr')
install.packages('dplyr')
library("highcharter")
library("magrittr")
library("dplyr")
data("citytemp")
hc <- highchart() %>%
hc_add_serie(name = "tokyo", data = citytemp$tokyo)
hc
# adding themes and series
hc <- hc %>%
hc_title(text = "Temperatures for some cities") %>%
hc_xAxis(categories = citytemp$month) %>%
hc_add_serie(name = "London", data = citytemp$london,
dataLabels = list(enabled = TRUE)) %>%
hc_add_serie(name = "New York", data = citytemp$new_york,
type = "spline") %>%
hc_yAxis(title = list(text = "Temperature"),
labels = list(format = "{value}? C")) %>%
hc_add_theme(hc_theme_sandsignika())
hc
# adding themes and series
hc <- hc %>%
hc_title(text = "Temperatures for some cities") %>%
hc_xAxis(categories = citytemp$month) %>%
hc_add_serie(name = "London", data = citytemp$london,
dataLabels = list(enabled = TRUE)) %>%
hc_add_serie(name = "New York", data = citytemp$new_york,
type = "spline") %>%
hc_yAxis(title = list(text = "Temperature"),
labels = list(format = "{value} %")) %>%
hc_add_theme(hc_theme_sandsignika())
hc
install.packages('httr')
install.packages('purrr')
install.packages("purrr")
# scraping data about movies and plotting
library("httr")
library("purrr")
# scraping data about movies and plotting
library("httr")
library("purrr")
install.packages('purrr')
# scraping data about movies and plotting
library("httr")
library("purrr")
# get some data
swmovies <- content(GET("http://swapi.co/api/films/?format=json"))
View(swmovies)
swmovies
swdata <- map_df(swmovies$results, function(x){
data_frame(title = x$title,
species = length(x$species),
planets = length(x$planets),
release = x$release_date)
}) %>% arrange(release)
library("httr")
library("purrr")
swdata <- map_df(swmovies$results, function(x){
data_frame(title = x$title,
species = length(x$species),
planets = length(x$planets),
release = x$release_date)
}) %>% arrange(release)
library("highcharter")
library("magrittr")
library("dplyr")
swdata <- map_df(swmovies$results, function(x){
data_frame(title = x$title,
species = length(x$species),
planets = length(x$planets),
release = x$release_date)
}) %>% arrange(release)
swdata
# made a theme
swthm <- hc_theme_merge(
hc_theme_darkunica(),
hc_theme(
credits = list(
style = list(
color = "#4bd5ee"
)
),
title = list(
style = list(
color = "#4bd5ee"
)
),
chart = list(
backgroundColor = "transparent",
divBackgroundImage = "http://www.wired.com/images_blogs/underwire/2013/02/xwing-bg.gif",
style = list(fontFamily = "Lato")
)
)
)
# chart
highchart() %>%
hc_add_theme(swthm) %>%
hc_xAxis(categories = swdata$title,
title = list(text = "Movie")) %>%
hc_yAxis(title = list(text = "Number")) %>%
hc_add_serie(data = swdata$species, name = "Species",
type = "column", color = "#e5b13a") %>%
hc_add_serie(data = swdata$planets, name = "Planets",
type = "column", color = "#4bd5ee") %>%
hc_title(text = "Diversity in <span style="color:#e5b13a">
STAR WARS</span> movies",
useHTML = TRUE) %>%
hc_credits(enabled = TRUE, text = "Source: SWAPI",
href = "https://swapi.co/",
style = list(fontSize = "12px"))
# chart
highchart() %>%
hc_add_theme(swthm) %>%
hc_xAxis(categories = swdata$title,
title = list(text = "Movie")) %>%
hc_yAxis(title = list(text = "Number")) %>%
hc_add_serie(data = swdata$species, name = "Species",
type = "column", color = "#e5b13a") %>%
hc_add_serie(data = swdata$planets, name = "Planets",
type = "column", color = "#4bd5ee") %>%
hc_title(text = "Diversity in <span style="color:#e5b13a"> STAR WARS</span> movies",
useHTML = TRUE) %>%
hc_credits(enabled = TRUE, text = "Source: SWAPI",
href = "https://swapi.co/",
style = list(fontSize = "12px"))
# chart
highchart() %>%
hc_add_theme(swthm) %>%
hc_xAxis(categories = swdata$title,
title = list(text = "Movie")) %>%
hc_yAxis(title = list(text = "Number")) %>%
hc_add_serie(data = swdata$species, name = "Species",
type = "column", color = "#e5b13a") %>%
hc_add_serie(data = swdata$planets, name = "Planets",
type = "column", color = "#4bd5ee") %>%
hc_title(text = "Diversity in <span style="color:#e5b13a"> STAR WARS</span> movies", useHTML = TRUE) %>%
hc_credits(enabled = TRUE, text = "Source: SWAPI",
href = "https://swapi.co/",
style = list(fontSize = "12px"))
# chart
highchart() %>%
hc_add_theme(swthm) %>%
hc_xAxis(categories = swdata$title,
title = list(text = "Movie")) %>%
hc_yAxis(title = list(text = "Number")) %>%
hc_add_serie(data = swdata$species, name = "Species",
type = "column", color = "#e5b13a") %>%
hc_add_serie(data = swdata$planets, name = "Planets",
type = "column", color = "#4bd5ee") %>%
hc_title(text = "Diversity in <span style="color:#e5b13a">
STAR WARS</span> movies",
useHTML = TRUE) %>%
hc_credits(enabled = TRUE, text = "Source: SWAPI",
href = "https://swapi.co/",
style = list(fontSize = "12px"))
# chart
highchart() %>%
hc_add_theme(swthm) %>%
hc_xAxis(categories = swdata$title,
title = list(text = "Movie")) %>%
hc_yAxis(title = list(text = "Number")) %>%
hc_add_serie(data = swdata$species, name = "Species",
type = "column", color = "#e5b13a") %>%
hc_add_serie(data = swdata$planets, name = "Planets",
type = "column", color = "#4bd5ee") %>%
hc_title(text = "Diversity in STAR WARS movies", useHTML = TRUE) %>%
hc_credits(enabled = TRUE, text = "Source: SWAPI",
href = "https://swapi.co/",
style = list(fontSize = "12px"))
highchart() %>%
hc_title(text = "Monthly Deaths from Lung Diseases in the UK") %>%
hc_add_serie_ts2(fdeaths, name = "Female") %>%
hc_add_serie_ts2(mdeaths, name = "Male")
hcmtcars <- highchart() %>%
hc_title(text = "Motor Trend Car Road Tests") %>%
hc_subtitle(text = "Source: 1974 Motor Trend US magazine") %>%
hc_xAxis(title = list(text = "Weight")) %>%
hc_yAxis(title = list(text = "Miles/gallon")) %>%
hc_chart(zoomType = "xy") %>%
hc_add_serie_scatter(mtcars$wt, mtcars$mpg,
mtcars$drat, mtcars$hp,
rownames(mtcars),
dataLabels = list(
enabled = TRUE,
format = "{point.label}"
)) %>%
hc_tooltip(useHTML = TRUE,
headerFormat = "<table>",
pointFormat = paste("<tr><th colspan="1"><b>{point.label}</b></th></tr>",
"<tr><th>Weight</th><td>{point.x} lb/1000</td></tr>",
"<tr><th>MPG</th><td>{point.y} mpg</td></tr>",
"<tr><th>Drat</th><td>{point.z} </td></tr>",
"<tr><th>HP</th><td>{point.valuecolor} hp</td></tr>"),
footerFormat = "</table>")
hcmtcars
hcmtcars <- highchart() %>%
hc_title(text = "Motor Trend Car Road Tests") %>%
hc_subtitle(text = "Source: 1974 Motor Trend US magazine") %>%
hc_xAxis(title = list(text = "Weight")) %>%
hc_yAxis(title = list(text = "Miles/gallon")) %>%
hc_chart(zoomType = "xy") %>%
hc_add_serie_scatter(mtcars$wt, mtcars$mpg,
mtcars$drat, mtcars$hp,
rownames(mtcars),
dataLabels = list(
enabled = TRUE,
format = "{point.label}"
)) %>%
hc_tooltip(useHTML = TRUE,
headerFormat = "<table>",
pointFormat = paste("<tr><th><b>{point.label}</b></th></tr>",
"<tr><th>Weight</th><td>{point.x} lb/1000</td></tr>",
"<tr><th>MPG</th><td>{point.y} mpg</td></tr>",
"<tr><th>Drat</th><td>{point.z} </td></tr>",
"<tr><th>HP</th><td>{point.valuecolor} hp</td></tr>"),
footerFormat = "</table>")
hcmtcars
install.packages('treemap')
install.packages('treemap')
library("highcharter")
library("magrittr")
library("dplyr")
library("httr")
library("purrr")
install.packages('treemap')
install.packages('viridisLite')
install.packages("viridisLite")
library("highcharter")
library("magrittr")
library("dplyr")
library("httr")
library("purrr")
library("treemap")
install.packages('viridisLite')
install.packages("viridisLite")
library("viridisLite")
data(GNI2010)
tm <- treemap(GNI2010, index = c("continent", "iso3"),
vSize = "population", vColor = "GNI",
type = "value", palette = viridis(6))
hc_tm <- highchart() %>%
hc_add_serie_treemap(tm, allowDrillToNode = TRUE,
layoutAlgorithm = "squarified",
name = "tmdata") %>%
hc_title(text = "Gross National Income World Data") %>%
hc_tooltip(pointFormat = "<b>{point.name}</b>:<br>
Pop: {point.value:,.0f}<br>
GNI: {point.valuecolor:,.0f}")
hc_tm
iriscount <- count(iris, Species)
iriscount
highchart(width = 400, height = 400) %>%
hc_title(text = "Nom! a delicious 3d pie!") %>%
hc_subtitle(text = "your eyes hurt?") %>%
hc_chart(type = "pie", options3d = list(enabled = TRUE, alpha = 70, beta = 0)) %>%
hc_plotOptions(pie = list(depth = 70)) %>%
hc_add_serie_labels_values(iriscount$Species, iriscount$n) %>%
hc_add_theme(hc_theme(
chart = list(
backgroundColor = NULL,
divBackgroundImage = "https://media.giphy.com/media/Yy26NRbpB9lDi/giphy.gif"
)
))
data("favorite_bars")
data("favorite_pies")
highchart() %>%
hc_title(text = "This is a bar graph describing my favorite pies
including a pie chart describing my favorite bars") %>%
hc_subtitle(text = "In percentage of tastiness and awesomeness") %>%
hc_add_serie_labels_values(favorite_pies$pie, favorite_pies$percent, name = "Pie",
colorByPoint = TRUE, type = "column") %>%
hc_add_serie_labels_values(favorite_bars$bar, favorite_bars$percent, type = "pie",
name = "Bar", colorByPoint = TRUE, center = c('35%', '10%'),
size = 100, dataLabels = list(enabled = FALSE)) %>%
hc_yAxis(title = list(text = "percentage of tastiness"),
labels = list(format = "{value}%"), max = 100) %>%
hc_xAxis(categories = favorite_pies$pie) %>%
hc_credits(enabled = TRUE, text = "Source (plz click here!)",
href = "https://www.youtube.com/watch?v=f_J8QU1m0Ng",
style = list(fontSize = "12px")) %>%
hc_legend(enabled = FALSE) %>%
hc_tooltip(pointFormat = "{point.y}%")
?choose
choose(5, 3)
11/300*30*10000
11/300
11/300*15000
550/100
5.5*30
1000*log(1000)
log(1000)
choose(19, 2)
choose(10, 2)
35000*3/5
40000*3/5
55000/2
choose(5, 5)
4/5*3/5*2/5*1/5
599+399+999+799
install.packages('zoo')
setwd("D:/Programming/GitHub/Progs")
library(slidify)
library(slidifyLibraries)
publish('Progs', 'IrinaGoloshchapova', host = 'github')
slidify('index.Rmd')
publish('Progs', 'IrinaGoloshchapova', host = 'github')
library(zoo)
library(xts)
library(dygraphs)
library(xlsx)
library(reshape)
library(rCharts)
options(
rcharts.mode = 'iframesrc')
data_raw <- read.xlsx2(file = "Comp_an1.xlsx", sheetIndex = 1, header = TRUE,
colClasses = "numeric", stringsAsFactors = FALSE)
data_raw$Date <- as.Date(data_raw$Date-25569, origin="1970-01-01")
for (i in 2:11) {
data_raw[, i] <- as.numeric(data_raw[, i])
}
# data <- xts(data_raw[, 2:11], order.by = data_raw$Date)
data_md <- melt(data_raw, id.vars = "Date")
data_md$variable <- iconv(data_md$variable, from = "cp1251", to = "utf-8")
# data_md$Date <- as.character(data_md$Date)
p8 <- nPlot(value ~ Date, group =  'variable', data = data_md,
type = 'stackedAreaChart', id = 'chart')
p8$xAxis(
tickFormat =   "#!
function(d) {return d3.time.format('%Y-%m-%d')(new Date(d*1000*3600*24));}
!#"
)
# p8$save('compan.html', cdn = TRUE)
p8$save('compan.html', standalone = TRUE)
install.packages('base64enc')
library(zoo)
library(xts)
library(dygraphs)
library(xlsx)
library(reshape)
library(rCharts)
options(
rcharts.mode = 'iframesrc')
data_raw <- read.xlsx2(file = "Comp_an1.xlsx", sheetIndex = 1, header = TRUE,
colClasses = "numeric", stringsAsFactors = FALSE)
data_raw$Date <- as.Date(data_raw$Date-25569, origin="1970-01-01")
for (i in 2:11) {
data_raw[, i] <- as.numeric(data_raw[, i])
}
# data <- xts(data_raw[, 2:11], order.by = data_raw$Date)
data_md <- melt(data_raw, id.vars = "Date")
data_md$variable <- iconv(data_md$variable, from = "cp1251", to = "utf-8")
# data_md$Date <- as.character(data_md$Date)
p8 <- nPlot(value ~ Date, group =  'variable', data = data_md,
type = 'stackedAreaChart', id = 'chart')
p8$xAxis(
tickFormat =   "#!
function(d) {return d3.time.format('%Y-%m-%d')(new Date(d*1000*3600*24));}
!#"
)
p8$save('compan.html', standalone = TRUE)
slidify('index.Rmd')
publish('Progs', 'IrinaGoloshchapova', host = 'github')
slidify('index.Rmd')
publish('Progs', 'IrinaGoloshchapova', host = 'github')
options(
rcharts.mode = 'iframesrc')
data_raw <- read.xlsx2(file = "Comp_an1.xlsx", sheetIndex = 1, header = TRUE,
colClasses = "numeric", stringsAsFactors = FALSE)
data_raw$Date <- as.Date(data_raw$Date-25569, origin="1970-01-01")
for (i in 2:11) {
data_raw[, i] <- as.numeric(data_raw[, i])
}
# data <- xts(data_raw[, 2:11], order.by = data_raw$Date)
data_md <- melt(data_raw, id.vars = "Date")
data_md$variable <- iconv(data_md$variable, from = "cp1251", to = "utf-8")
# data_md$Date <- as.character(data_md$Date)
p8 <- nPlot(value ~ Date, group =  'variable', data = data_md,
type = 'stackedAreaChart', id = 'chart')
p8$xAxis(
tickFormat =   "#!
function(d) {return d3.time.format('%Y-%m-%d')(new Date(d*1000*3600*24));}
!#"
)
p8$set(width = 700, height = 450)
# p8$save('compan.html', cdn = TRUE)
p8$save('compan.html', standalone = TRUE)
slidify('index.Rmd')
publish('Progs', 'IrinaGoloshchapova', host = 'github')
slidify('index.Rmd')
publish('Progs', 'IrinaGoloshchapova', host = 'github')
slidify('index.Rmd')
publish('Progs', 'IrinaGoloshchapova', host = 'github')
slidify('index.Rmd')
publish('Progs', 'IrinaGoloshchapova', host = 'github')
slidify('index.Rmd')
publish('Progs', 'IrinaGoloshchapova', host = 'github')
HairEye <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n1 <- nPlot(Freq ~ Eye, data = HairEye, group = 'Hair', type = 'multiBarChart')
n1$addControls("x", "Eye", c('Eye', 'Hair'))
n1$addControls("group", "Hair", c('Eye', 'Hair'))
n1$addControls("type", "multiBarChart", values = c('multiBarChart', 'multiBarHorizontalChart'))
n1$setTemplate(script = system.file('libraries', 'nvd3', 'controls', 'datgui.html', package = 'rCharts'))
n1
HairEye <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n1 <- nPlot(Freq ~ Eye, data = HairEye, group = 'Hair', type = 'multiBarChart')
n1$addControls("x", "Eye", c('Eye', 'Hair'))
n1$addControls("group", "Hair", c('Eye', 'Hair'))
n1$addControls("type", "multiBarChart", values = c('multiBarChart', 'multiBarHorizontalChart'))
n1$setTemplate(script = system.file('libraries', 'nvd3', 'controls', 'datgui.html', package = 'rCharts'))
n1$show()
slidify('index.Rmd')
slidify('index.Rmd')
publish('Progs', 'IrinaGoloshchapova', host = 'github')
install.packages("leaflet")
install.packages('rgdal')
library(leaflet)
library(rgdal)
countries <- readOGR("files/countries.geojson", "OGRGeoJSON")
map <- leaflet(countries) %>% addTiles()
qpal <- colorQuantile("RdYlBu", countries$gdp_md_est, n = 5)
map %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~qpal(gdp_md_est)
) %>%
addLegend(pal = qpal, values = ~gdp_md_est, opacity = 1)
slidify('index.Rmd')
slidify('index.Rmd')
publish('Progs', 'IrinaGoloshchapova', host = 'github')
map
?readOGR
slidify('index.Rmd')
publish('Progs', 'IrinaGoloshchapova', host = 'github')
slidify('index.Rmd')
map
install.packages('htmlwidgets')
install.packages("htmlwidgets")
library(leaflet)
library(rgdal)
library(htmlwidgets)
countries <- readOGR("files/countries.geojson", "OGRGeoJSON")
qpal <- colorQuantile("RdYlBu", countries$gdp_md_est, n = 5)
map <- leaflet(countries) %>% addTiles() %>% map %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~qpal(gdp_md_est)
) %>%
addLegend(pal = qpal, values = ~gdp_md_est, opacity = 1)
library(htmlwidgets)
library(leaflet)
library(rgdal)
map <- leaflet(countries) %>% addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~qpal(gdp_md_est)
) %>%
addLegend(pal = qpal, values = ~gdp_md_est, opacity = 1)
map
saveWidget(map, 'figures/map_gdp.html')
htmlwidgets:: saveWidget(map, 'figures/map_gdp.html')
?saveWidget
htmlwidgets:: saveWidget(map, 'map_gdp.html')
slidify('index.Rmd')
publish('Progs', 'IrinaGoloshchapova', host = 'github')
library(leaflet)
library(rgdal)
countries <- readOGR("files/countries.geojson", "OGRGeoJSON")
slidify('index.Rmd')
publish('Progs', 'IrinaGoloshchapova', host = 'github')
slidify('index.Rmd')
publish('Progs', 'IrinaGoloshchapova', host = 'github')
install_github('shiny', 'rstudio')
library(devtools)
install_github('shiny', 'rstudio')
library(shiny)
runDeck()
runDeck()
install_github('shiny', 'rstudio')
runDeck()
runDeck()

text_final <- stem_text(clean_text(text))
text_final
input <- data.frame(id = 1, text = text_final)
setDT(input)
setkey(input, id)
# functions
tok_fun <- word_tokenizer
prep_fun <- identity
# input preparation
it_input = input$text %>%
prep_fun %>%
tok_fun %>%
itoken(ids = input$id,
# turn off progressbar because it won't look nice in rmd
progressbar = TRUE)
str(input)
input <- data.frame(id = 1, text = as.character(text_final))
setDT(input)
setkey(input, id)
# input preparation
it_input = input$text %>%
prep_fun %>%
tok_fun %>%
itoken(ids = input$id,
# turn off progressbar because it won't look nice in rmd
progressbar = TRUE)
str(input)
input$text <- as.character(input$text)
str(input)
# input preparation
it_input = input$text %>%
prep_fun %>%
tok_fun %>%
itoken(ids = input$id,
# turn off progressbar because it won't look nice in rmd
progressbar = TRUE)
dtm_input <- create_dtm(it_input, bigram_vectorizer)
dtm_input_tfidf <- create_dtm(it_input, bigram_vectorizer) %>%
transform(tfidf)
bestRound <- 185
pred_tfidf <- predict(model_xgboost_tfidf, dtm_input_tfidf, ntreelimit = bestRound)
pred_tfidf
pred_tfidf <- pred_tfidf + 1
pred_tfidf
text <- 'Очень хороший банк я очень довольная'
text_final <- stem_text(clean_text(text))
input <- data.frame(id = 1, text = text_final)
setDT(input)
setkey(input, id)
input$text <- as.character(input$text)
# functions
tok_fun <- word_tokenizer
prep_fun <- identity
# input preparation
# input preparation
it_input = input$text %>%
prep_fun %>%
tok_fun %>%
itoken(ids = input$id,
# turn off progressbar because it won't look nice in rmd
progressbar = TRUE)
dtm_input <- create_dtm(it_input, bigram_vectorizer)
dtm_input_tfidf <- create_dtm(it_input, bigram_vectorizer) %>%
transform(tfidf)
bestRound <- 185
pred_tfidf <- predict(model_xgboost_tfidf, dtm_input_tfidf, ntreelimit = bestRound) + 1
pred_tfidf
shiny::runApp('Programming/Python/Learning/MIPT/Homeworks/Project_Otzyvy')
runApp('Programming/Python/Learning/MIPT/Homeworks/Project_Otzyvy')
runApp('Programming/Python/Learning/MIPT/Homeworks/Project_Otzyvy')
runApp('Programming/Python/Learning/MIPT/Homeworks/Project_Otzyvy')
rm(list = ls())
load('~/Programming/Python/Learning/MIPT/Homeworks/Project_Otzyvy/App_Data.RData')
clean_text <- function(doc) {
stopwords <- c("в", "без", "до", "из", "к", "на", "по", "о", "от", "перед", "при", "через", "за", "над", "об", "под", "про", "для", "вблизи", "вглубь", "вдоль", "возле", "около", "вокруг", "впереди", "после", "посредством", "в роли", "в зависимости от", "путём", "насчёт", "по поводу", "ввиду", "по случаю", "в течение", "благодаря", "несмотря на", "спустя", "с ", "из-под", "из-за", "по-над", "в отличие от", "в связи", "как", "словно", "так как", "для того чтобы", "тоже", "зато", "чтобы", "также", "потому что", "и ", "а ", "что", "или", "но", "однако", "когда", "лишь", "едва", "где", "куда", "откуда", "столько", "настолько", "так", "до такой степени", "до того", "такой", "как будто", "будто", "точно", "как бы","если", "если бы", "коли", "ежели", "несмотря на то", "хотя", "хоть", "пускай", "дабы", "с тем чтобы", "так что", "ли", "не", "какой")
doc <- enc2utf8(doc)
doc <- tolower(doc)
doc <- removeWords(doc, stopwords)
doc <- removePunctuation(doc)
doc <- str_replace_all(doc, "\\s+", " ")
doc <- str_trim(doc, side = "both")
enc2native(doc)
}
stem_text <- function(x) {
res <- system(link, intern = TRUE, input = x)
res <- paste(res, sep = '', collapse = '')
res <- gsub("[{}]", "", res)
res <- gsub("(\\|[^ ]+)", "", res)
res <- gsub("\\?", "", res)
res <- gsub("\\s+", " ", res)
res
}
save.image('~/Programming/Python/Learning/MIPT/Homeworks/Project_Otzyvy/App_Data.RData')
link <- paste0('~/GitHub/MyApplication/dist/mystem-3.0-win7-64bit/mystem -cl -e cp1251')
save.image('~/Programming/Python/Learning/MIPT/Homeworks/Project_Otzyvy/App_Data.RData')
runApp('Programming/Python/Learning/MIPT/Homeworks/Project_Otzyvy')
install.packages('shinydashboard')
runApp('Programming/Python/Learning/MIPT/Homeworks/Project_Otzyvy')
link <- paste0('C:/Users/User/Documents/Programming/Python/Learning/MIPT/Homeworks/Project_Otzyvy/mystem-3.0-win7-64bit/mystem -cl -e cp1251')
save.image('~/Programming/Python/Learning/MIPT/Homeworks/Project_Otzyvy/App_Data.RData')
runApp('Programming/Python/Learning/MIPT/Homeworks/Project_Otzyvy')
runApp('Programming/Python/Learning/MIPT/Homeworks/Project_Otzyvy')
shiny::runApp('Programming/Python/Learning/MIPT/Homeworks/Project_Otzyvy')
runApp('Programming/Python/Learning/MIPT/Homeworks/Project_Otzyvy')
runApp('Programming/Python/Learning/MIPT/Homeworks/Project_Otzyvy')
runApp('Programming/Python/Learning/MIPT/Homeworks/Project_Otzyvy')
runApp('Programming/Python/Learning/MIPT/Homeworks/Project_Otzyvy')
runApp('Programming/Python/Learning/MIPT/Homeworks/Project_Otzyvy')
.libPaths()
library(dplyr)
?recode
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
setwd('~/Programming/R/R_code/CMASF/CBR/Part_3_1_Clustering')
library(tidyverse)
library(RSQLite)
library(zoo)
library(plotly)
library(ggrepel)
library(lubridate)
library(gridExtra)
library(DT)
library(scales)
library(viridis)
library(ggradar) # devtools::install_github('ricardo-bion/ggradar', dependencies = TRUE)
library(extrafont)
library(ggiraph)
require(maps)
library(ggmap)
library(forcats)
require(SciencesPo)
library(GGally)
library(corrr)
library(ggrepel)
library(googleVis)
library(data.table)
# -------------------------------
# Loading objects
# -------------------------------
fs <- src_sqlite("fs_data.sqlite", create = FALSE)
# contribs <- tbl(fs, "pca2_contributions") %>% collect()
# corrs <- tbl(fs, "pca2_correlations") %>% collect()
# pc1s <- tbl(fs, "pca_results") %>% collect()
fs_data <- tbl(fs, "fs_data_normalized") %>% collect()
bs_data <- tbl(fs, "bs_data_normalized") %>% collect()
imf_data <- tbl(fs, "imf_data_normalized") %>% collect()
allpca_results <- tbl(fs, "allpca_results") %>% collect()
bayes_res <- tbl(fs, "bayes_res") %>% collect() %>% mutate(class = as.factor(class)) %>% ungroup
pca2_contributions <- tbl(fs, "pca2_contributions") %>% collect()
Indicator_Value_in_Russian <- fread('Results/Indicator_Value_in_Russian.csv')
# Coeffitients of variation dynamics
allpca_results <- allpca_results %>% left_join(bayes_res, by = c('Country_Value'))
diversity <- fs_data %>% group_by(category, Indicator_Value, Indicator_Id, date) %>% summarize(value_mean = mean(value), value_stdev = sd(value)) %>% mutate(coef_var = value_stdev/value_mean) %>% mutate(date = lubridate::year(as.Date(as.character(date), format = "%Y")))
diversity <- diversity %>% mutate_each(funs(round(., 2)), -category, -Indicator_Value, -Indicator_Id, -date)
temps <- fs_data %>% group_by(category, Indicator_Value, Indicator_Id, Country_Value) %>% summarize(rate_14_04 = (value[length(value)] - value[1])/value[1], value_04 = value[1]) %>% mutate(russia = factor(ifelse(Country_Value == 'Russian Federation', 0, 1), labels = c('Russia', 'Others')))
temps <- select(temps, -russia) %>% mutate_each(funs(round(., 2)), -category, -Indicator_Value, -Indicator_Id, -Country_Value)
bayes_res <- bayes_res %>% mutate(uncertainty = round(uncertainty, 2))
clusts_agg <- allpca_results %>% group_by(class) %>% summarize_each(funs(mean), -Country_Value, -class, -date) %>% select(-ends_with('_var_explained'), -uncertainty)
clusts_agg <- gather(clusts_agg, indicator, value, -class) %>% mutate(value = round(value, 2))
countries <- allpca_results %>% ungroup %>% group_by(class, Country_Value) %>% select(-ends_with('_var_explained'), -uncertainty) %>% summarize_each(funs(mean), -date, -Country_Value, -class)
countries <- countries %>% gather(key = category, value = value, -Country_Value, -class) %>% ungroup %>% filter(class != 5)
countries <- countries %>% mutate(russia_colour = ifelse(Country_Value == 'Russian Federation', 1, 0),
class = recode(class, `1` = "Class 1", `2` = 'Class 2', `3` = 'Class 3', `4` = 'Class 4'))
bs_agg <- bs_data %>% left_join(select(bayes_res, -uncertainty), by = c('Country_Value'))
bs_agg <- bs_agg %>% group_by(class, Indicator_Id) %>% summarize(value = mean(value, na.rm = TRUE)) %>% mutate(value = round(value, 2))
imf_agg <- imf_data %>% bind_rows(filter(fs_data, Indicator_Id %in% c('GFDD.DI.07', 'GFDD.DI.13', 'GFDD.DI.01', 'Gross_income_to_GDP', 'Fin_impact_to_GDP'))) %>% left_join(select(bayes_res, -uncertainty), by = c('Country_Value'))
imf_agg <- imf_agg %>% group_by(class, Indicator_Id) %>% summarize(value = mean(value, na.rm = TRUE)) %>% mutate(value = round(value, 2))
clusts_agg_rus <- allpca_results %>% filter(class == 1) %>% select(-class) %>% group_by(Country_Value) %>% summarize_each(funs(mean), -date) %>% select(-ends_with('_var_explained'), -uncertainty)
clusts_agg_rus <- gather(clusts_agg_rus, indicator, value, -Country_Value) %>% mutate(value = round(value, 1))
clusts_agg_rus <- clusts_agg_rus %>% mutate(russia = factor(ifelse(Country_Value == 'Russian Federation', 0, 1), labels = c('Russia', 'Others')))
g2 <- ggplot(clusts_agg_rus, aes(x = indicator, y = value, text = paste("Country:", Country_Value))) + geom_boxplot(alpha = 0.6)
g2 <- g2 + geom_jitter(aes(colour = russia), alpha = 0.9, size = 1.1) + scale_colour_manual(values = c('#D93639', '#757864'))
g2 <- g2 + theme_minimal() + labs(x = NULL, y = NULL) + theme(legend.position = 'none')
ggplotly(g2)
g1 <- ggplot(countries, aes(x = category, y = value, fill = category, text = paste("Country:", Country_Value))) + geom_boxplot(alpha = 0.6)
g1 <- g1 + geom_jitter(aes(colour = russia_colour), alpha = 0.5, size = 0.8) + scale_fill_brewer(palette = "Set1")
g1 <- g1 + facet_wrap(~class, nrow = 3)
g1 <- g1 + theme_minimal() + labs(x = NULL, y = NULL) + theme(legend.position = 'none')
ggplotly(g1)
clusts_agg <- clusts_agg %>% mutate(class = recode(class, `1` = "Периферия", `2` = 'Перегретые лидеры', `3` = 'Class 3', `4` = 'Class 4'))
# function
plotting <- function(x) {return(g1 <- ggplot(x, aes(x = indicator, y = value, fill = factor(indicator), label = value)) + geom_bar(stat = 'identity', alpha = 0.6) + geom_text(vjust = -1) + theme_minimal() + labs(x = NULL, y = NULL) + theme(legend.position = 'none'))}
results <- clusts_agg %>% slice_rows('class') %>% by_slice(plotting)
grid.arrange(results$.out[[1]] + ggtitle(paste0('Class = ', results$class[[1]])), results$.out[[2]] + ggtitle(paste0('Class = ', results$class[[2]])),
results$.out[[3]] + ggtitle(paste0('Class = ', results$class[[3]])), results$.out[[4]] + ggtitle(paste0('Class = ', results$class[[4]])),
ncol = 2, nrow = 3)
clusts_agg <- clusts_agg %>% mutate(class = recode(class, `1` = "Периферия", `2` = 'Перегретые лидеры', `3` = 'Сбалансированные лидеры', `4` = 'Сателлиты'))
# function
plotting <- function(x) {return(g1 <- ggplot(x, aes(x = indicator, y = value, fill = factor(indicator), label = value)) + geom_bar(stat = 'identity', alpha = 0.6) + geom_text(vjust = -1) + theme_minimal() + labs(x = NULL, y = NULL) + theme(legend.position = 'none'))}
results <- clusts_agg %>% slice_rows('class') %>% by_slice(plotting)
grid.arrange(results$.out[[1]] + ggtitle(results$class[[1]]), results$.out[[2]] + ggtitle(paste0(results$class[[2]])),
results$.out[[3]] + ggtitle(paste0(results$class[[3]])), results$.out[[4]] + ggtitle(paste0(results$class[[4]])),
ncol = 2, nrow = 3)
clusts_agg <- allpca_results %>% group_by(class) %>% summarize_each(funs(mean), -Country_Value, -class, -date) %>% select(-ends_with('_var_explained'), -uncertainty)
clusts_agg <- gather(clusts_agg, indicator, value, -class) %>% mutate(value = round(value, 2))
clusts_agg <- clusts_agg %>% mutate(class = recode(class, `1` = "Периферия", `2` = 'Перегретые лидеры', `3` = 'Сбалансированные лидеры', `4` = 'Сателлиты'))
# function
plotting <- function(x) {return(g1 <- ggplot(x, aes(x = indicator, y = value, fill = factor(indicator), label = value)) + geom_bar(stat = 'identity', alpha = 0.6) + geom_text(vjust = -1) + theme_minimal() + labs(x = NULL, y = NULL) + theme(legend.position = 'none'))}
results <- clusts_agg %>% slice_rows('class') %>% by_slice(plotting)
grid.arrange(results$.out[[1]] + ggtitle(results$class[[1]]), results$.out[[2]] + ggtitle(paste0(results$class[[2]])),
results$.out[[3]] + ggtitle(paste0(results$class[[3]])), results$.out[[4]] + ggtitle(paste0(results$class[[4]])),
ncol = 2, nrow = 3)
?ggtitle
?grid.arrange
grid.arrange(results$.out[[1]] + ggtitle(paste0('        ', results$class[[1]])), results$.out[[2]] + ggtitle(paste0('        ', results$class[[2]])),
results$.out[[3]] + ggtitle(paste0('        ', results$class[[3]])), results$.out[[4]] + ggtitle(paste0('        ', results$class[[4]])),
ncol = 2, nrow = 3)
# function
plotting <- function(x) {return(g1 <- ggplot(x, aes(x = indicator, y = value, fill = factor(indicator), label = value)) + geom_bar(stat = 'identity', alpha = 0.6) + geom_text(vjust = -1) + theme_minimal() + labs(x = NULL, y = NULL) + theme(legend.position = 'none')) +
theme(plot.title = element_text(hjust = 2))}
results <- clusts_agg %>% slice_rows('class') %>% by_slice(plotting)
grid.arrange(results$.out[[1]] + ggtitle(results$class[[1]]), results$.out[[2]] + ggtitle(paste0(results$class[[2]])),
results$.out[[3]] + ggtitle(paste0(results$class[[3]])), results$.out[[4]] + ggtitle(paste0(results$class[[4]])),
ncol = 2, nrow = 3)
clusts_agg <- allpca_results %>% group_by(class) %>% summarize_each(funs(mean), -Country_Value, -class, -date) %>% select(-ends_with('_var_explained'), -uncertainty)
clusts_agg <- gather(clusts_agg, indicator, value, -class) %>% mutate(value = round(value, 2))
clusts_agg <- clusts_agg %>% mutate(class = recode(class, `1` = "Периферия", `2` = 'Перегретые лидеры', `3` = 'Сбалансированные лидеры', `4` = 'Сателлиты'))
# function
plotting <- function(x) {return(g1 <- ggplot(x, aes(x = indicator, y = value, fill = factor(indicator), label = value)) + geom_bar(stat = 'identity', alpha = 0.6) + geom_text(vjust = -1) + theme_minimal() + labs(x = NULL, y = NULL) + theme(legend.position = 'none')) +
theme(plot.title = element_text(hjust = 5))}
results <- clusts_agg %>% slice_rows('class') %>% by_slice(plotting)
grid.arrange(results$.out[[1]] + ggtitle(results$class[[1]]), results$.out[[2]] + ggtitle(paste0(results$class[[2]])),
results$.out[[3]] + ggtitle(paste0(results$class[[3]])), results$.out[[4]] + ggtitle(paste0(results$class[[4]])),
ncol = 2, nrow = 3)
clusts_agg <- allpca_results %>% group_by(class) %>% summarize_each(funs(mean), -Country_Value, -class, -date) %>% select(-ends_with('_var_explained'), -uncertainty)
clusts_agg <- gather(clusts_agg, indicator, value, -class) %>% mutate(value = round(value, 2))
clusts_agg <- clusts_agg %>% mutate(class = recode(class, `1` = "Периферия", `2` = 'Перегретые лидеры', `3` = 'Сбалансированные лидеры', `4` = 'Сателлиты'))
# function
plotting <- function(x) {return(g1 <- ggplot(x, aes(x = indicator, y = value, fill = factor(indicator), label = value)) + geom_bar(stat = 'identity', alpha = 0.6) + geom_text(vjust = -1) + theme_minimal() + labs(x = NULL, y = NULL) + theme(legend.position = 'none')) +
theme(plot.title = element_text(hjust = -10))}
results <- clusts_agg %>% slice_rows('class') %>% by_slice(plotting)
grid.arrange(results$.out[[1]] + ggtitle(results$class[[1]]), results$.out[[2]] + ggtitle(paste0(results$class[[2]])),
results$.out[[3]] + ggtitle(paste0(results$class[[3]])), results$.out[[4]] + ggtitle(paste0(results$class[[4]])),
ncol = 2, nrow = 3)
clusts_agg <- allpca_results %>% group_by(class) %>% summarize_each(funs(mean), -Country_Value, -class, -date) %>% select(-ends_with('_var_explained'), -uncertainty)
clusts_agg <- gather(clusts_agg, indicator, value, -class) %>% mutate(value = round(value, 2))
clusts_agg <- clusts_agg %>% mutate(class = recode(class, `1` = "Периферия", `2` = 'Перегретые лидеры', `3` = 'Сбалансированные лидеры', `4` = 'Сателлиты'))
# function
plotting <- function(x) {return(g1 <- ggplot(x, aes(x = indicator, y = value, fill = factor(indicator), label = value)) + geom_bar(stat = 'identity', alpha = 0.6) + geom_text(vjust = -1) + theme_minimal() + labs(x = NULL, y = NULL) + theme(legend.position = 'none')) +
theme(plot.title = element_text(hjust = -10))}
results <- clusts_agg %>% slice_rows('class') %>% by_slice(plotting)
grid.arrange(results$.out[[1]] + ggtitle(results$class[[1]]) +
theme(plot.title = element_text(hjust = -10)),
results$.out[[2]] + ggtitle(paste0(results$class[[2]])) +
theme(plot.title = element_text(hjust = -10)),
results$.out[[3]] + ggtitle(paste0(results$class[[3]])) +
theme(plot.title = element_text(hjust = -10)),
results$.out[[4]] + ggtitle(paste0(results$class[[4]])),
ncol = 2, nrow = 3) +
theme(plot.title = element_text(hjust = -10))
clusts_agg <- allpca_results %>% group_by(class) %>% summarize_each(funs(mean), -Country_Value, -class, -date) %>% select(-ends_with('_var_explained'), -uncertainty)
clusts_agg <- gather(clusts_agg, indicator, value, -class) %>% mutate(value = round(value, 2))
clusts_agg <- clusts_agg %>% mutate(class = recode(class, `1` = "Периферия", `2` = 'Перегретые лидеры', `3` = 'Сбалансированные лидеры', `4` = 'Сателлиты'))
# function
plotting <- function(x) {return(g1 <- ggplot(x, aes(x = indicator, y = value, fill = factor(indicator), label = value)) + geom_bar(stat = 'identity', alpha = 0.6) + geom_text(vjust = -1) + theme_minimal() + labs(x = NULL, y = NULL) + theme(legend.position = 'none'))}
results <- clusts_agg %>% slice_rows('class') %>% by_slice(plotting)
grid.arrange(results$.out[[1]] + ggtitle(results$class[[1]]) +
theme(plot.title = element_text(hjust = -1)),
results$.out[[2]] + ggtitle(paste0(results$class[[2]])) +
theme(plot.title = element_text(hjust = -1)),
results$.out[[3]] + ggtitle(paste0(results$class[[3]])) +
theme(plot.title = element_text(hjust = -1)),
results$.out[[4]] + ggtitle(paste0(results$class[[4]])),
ncol = 2, nrow = 3) +
theme(plot.title = element_text(hjust = -1))
grid.arrange(results$.out[[1]] + ggtitle(results$class[[1]]) +
theme(plot.title = element_text(hjust = 0.3)),
results$.out[[2]] + ggtitle(paste0(results$class[[2]])) +
theme(plot.title = element_text(hjust = 0.3)),
results$.out[[3]] + ggtitle(paste0(results$class[[3]])) +
theme(plot.title = element_text(hjust = 0.3)),
results$.out[[4]] + ggtitle(paste0(results$class[[4]])),
ncol = 2, nrow = 3) +
theme(plot.title = element_text(hjust = 0.3))
clusts_agg <- allpca_results %>% group_by(class) %>% summarize_each(funs(mean), -Country_Value, -class, -date) %>% select(-ends_with('_var_explained'), -uncertainty)
clusts_agg <- gather(clusts_agg, indicator, value, -class) %>% mutate(value = round(value, 2))
clusts_agg <- clusts_agg %>% mutate(class = recode(class, `1` = "Периферия", `2` = 'Перегретые лидеры', `3` = 'Сбалансированные лидеры', `4` = 'Сателлиты'))
# function
plotting <- function(x) {return(g1 <- ggplot(x, aes(x = indicator, y = value, fill = factor(indicator), label = value)) + geom_bar(stat = 'identity', alpha = 0.6) + geom_text(vjust = -0.5) + theme_minimal() + labs(x = NULL, y = NULL) + theme(legend.position = 'none'))}
results <- clusts_agg %>% slice_rows('class') %>% by_slice(plotting)
grid.arrange(results$.out[[1]] + ggtitle(results$class[[1]]) +
theme(plot.title = element_text(hjust = 0.3)),
results$.out[[2]] + ggtitle(paste0(results$class[[2]])) +
theme(plot.title = element_text(hjust = 0.3)),
results$.out[[3]] + ggtitle(paste0(results$class[[3]])) +
theme(plot.title = element_text(hjust = 0.3)),
results$.out[[4]] + ggtitle(paste0(results$class[[4]])),
ncol = 2, nrow = 3) +
theme(plot.title = element_text(hjust = 0.3))
grid.arrange(results$.out[[1]] + ggtitle(results$class[[1]]),
results$.out[[2]] + ggtitle(paste0(results$class[[2]])),
results$.out[[3]] + ggtitle(paste0(results$class[[3]])),
results$.out[[4]] + ggtitle(paste0(results$class[[4]])),
ncol = 2, nrow = 3)
grid.arrange(results$.out[[1]] + ggtitle(results$class[[1]]),
results$.out[[2]] + ggtitle(paste0(results$class[[2]])),
results$.out[[3]] + ggtitle(paste0(results$class[[3]])),
results$.out[[4]] + ggtitle(paste0(results$class[[4]])),
ncol = 2, nrow = 2)
# function
plotting <- function(x) {return(g1 <- ggplot(x, aes(x = indicator, y = value, fill = factor(indicator), label = value)) + geom_bar(stat = 'identity', alpha = 0.6) + geom_text(vjust = -0.5, size = 7) + theme_minimal() + labs(x = NULL, y = NULL) + theme(legend.position = 'none', legend.text = element_text(size = 8)))}
results <- clusts_agg %>% slice_rows('class') %>% by_slice(plotting)
grid.arrange(results$.out[[1]] + ggtitle(results$class[[1]]),
results$.out[[2]] + ggtitle(paste0(results$class[[2]])),
results$.out[[3]] + ggtitle(paste0(results$class[[3]])),
results$.out[[4]] + ggtitle(paste0(results$class[[4]])),
ncol = 2, nrow = 2)
# function
plotting <- function(x) {return(g1 <- ggplot(x, aes(x = indicator, y = value, fill = factor(indicator), label = value)) + geom_bar(stat = 'identity', alpha = 0.6) + geom_text(vjust = -0.5, size = 3) + theme_minimal() + labs(x = NULL, y = NULL) + theme(legend.position = 'none', legend.text = element_text(size = 8)))}
results <- clusts_agg %>% slice_rows('class') %>% by_slice(plotting)
grid.arrange(results$.out[[1]] + ggtitle(results$class[[1]]),
results$.out[[2]] + ggtitle(paste0(results$class[[2]])),
results$.out[[3]] + ggtitle(paste0(results$class[[3]])),
results$.out[[4]] + ggtitle(paste0(results$class[[4]])),
ncol = 2, nrow = 2)
# function
plotting <- function(x) {return(g1 <- ggplot(x, aes(x = indicator, y = value, fill = factor(indicator), label = value)) + geom_bar(stat = 'identity', alpha = 0.6) + geom_text(vjust = -0.5, size = 3) + theme_minimal() + labs(x = NULL, y = NULL) + theme(legend.position = 'none', legend.text = element_text(size = 8)))}
results <- clusts_agg %>% slice_rows('class') %>% by_slice(plotting)
grid.arrange(results$.out[[1]] + ggtitle(results$class[[1]]),
results$.out[[2]] + ggtitle(paste0(results$class[[2]])),
results$.out[[3]] + ggtitle(paste0(results$class[[3]])),
results$.out[[4]] + ggtitle(paste0(results$class[[4]])),
ncol = 2, nrow = 2)
clusts_agg <- allpca_results %>% group_by(class) %>% summarize_each(funs(mean), -Country_Value, -class, -date) %>% select(-ends_with('_var_explained'), -uncertainty)
clusts_agg <- gather(clusts_agg, indicator, value, -class) %>% mutate(value = round(value, 2))
clusts_agg <- clusts_agg %>% mutate(class = recode(class, `1` = "Периферия", `2` = 'Перегретые лидеры', `3` = 'Сбалансированные лидеры', `4` = 'Сателлиты'))
# function
plotting <- function(x) {return(g1 <- ggplot(x, aes(x = indicator, y = value, fill = factor(indicator), label = value)) + geom_bar(stat = 'identity', alpha = 0.6) + geom_text(vjust = -0.5, size = 3) + theme_minimal() + labs(x = NULL, y = NULL) + theme(legend.position = 'none', legend.text = element_text(size = 8)))}
results <- clusts_agg %>% slice_rows('class') %>% by_slice(plotting)
grid.arrange(results$.out[[1]] + ggtitle(results$class[[1]]),
results$.out[[2]] + ggtitle(paste0(results$class[[2]])),
results$.out[[3]] + ggtitle(paste0(results$class[[3]])),
results$.out[[4]] + ggtitle(paste0(results$class[[4]])),
ncol = 2, nrow = 2)
clusts_agg <- allpca_results %>% group_by(class) %>% summarize_each(funs(mean), -Country_Value, -class, -date) %>% select(-ends_with('_var_explained'), -uncertainty)
clusts_agg <- gather(clusts_agg, indicator, value, -class) %>% mutate(value = round(value, 2))
clusts_agg <- clusts_agg %>% mutate(class = recode(class, `1` = "Периферия", `2` = 'Перегретые лидеры', `3` = 'Сбалансированные лидеры', `4` = 'Сателлиты'))
# function
plotting <- function(x) {return(g1 <- ggplot(x, aes(x = indicator, y = value, fill = factor(indicator), label = value)) + geom_bar(stat = 'identity', alpha = 0.6) + geom_text(vjust = -0.5, size = 3) + theme_minimal() + labs(x = NULL, y = NULL) + theme(legend.position = 'none', legend.text = element_text(size = 8)))}
results <- clusts_agg %>% slice_rows('class') %>% by_slice(plotting)
grid.arrange(results$.out[[1]] + ggtitle(results$class[[1]]),
results$.out[[2]] + ggtitle(paste0(results$class[[2]])),
results$.out[[3]] + ggtitle(paste0(results$class[[3]])),
results$.out[[4]] + ggtitle(paste0(results$class[[4]])),
ncol = 2, nrow = 2)
clusts_agg <- allpca_results %>% group_by(class) %>% summarize_each(funs(mean), -Country_Value, -class, -date) %>% select(-ends_with('_var_explained'), -uncertainty)
clusts_agg <- gather(clusts_agg, indicator, value, -class) %>% mutate(value = round(value, 2))
clusts_agg <- clusts_agg %>% mutate(class = recode(class, `1` = "Периферия", `2` = 'Перегретые лидеры', `3` = 'Сбалансированные лидеры', `4` = 'Сателлиты'))
# function
plotting <- function(x) {return(g1 <- ggplot(x, aes(x = indicator, y = value, fill = factor(indicator), label = value)) + geom_bar(stat = 'identity', alpha = 0.6) + geom_text(vjust = -0.5, size = 3) + theme_minimal() + labs(x = NULL, y = NULL) + theme(legend.position = 'none', legend.text = element_text(size = 8)), axis.text.x = element_text(size = 7))}
results <- clusts_agg %>% slice_rows('class') %>% by_slice(plotting)
clusts_agg <- allpca_results %>% group_by(class) %>% summarize_each(funs(mean), -Country_Value, -class, -date) %>% select(-ends_with('_var_explained'), -uncertainty)
clusts_agg <- gather(clusts_agg, indicator, value, -class) %>% mutate(value = round(value, 2))
clusts_agg <- clusts_agg %>% mutate(class = recode(class, `1` = "Периферия", `2` = 'Перегретые лидеры', `3` = 'Сбалансированные лидеры', `4` = 'Сателлиты'))
# function
plotting <- function(x) {return(g1 <- ggplot(x, aes(x = indicator, y = value, fill = factor(indicator), label = value)) + geom_bar(stat = 'identity', alpha = 0.6) + geom_text(vjust = -0.5, size = 3) + theme_minimal() + labs(x = NULL, y = NULL) + theme(legend.position = 'none', legend.text = element_text(size = 8), axis.text.x = element_text(size = 7)))}
results <- clusts_agg %>% slice_rows('class') %>% by_slice(plotting)
grid.arrange(results$.out[[1]] + ggtitle(results$class[[1]]),
results$.out[[2]] + ggtitle(paste0(results$class[[2]])),
results$.out[[3]] + ggtitle(paste0(results$class[[3]])),
results$.out[[4]] + ggtitle(paste0(results$class[[4]])),
ncol = 2, nrow = 2)
clusts_agg <- allpca_results %>% group_by(class) %>% summarize_each(funs(mean), -Country_Value, -class, -date) %>% select(-ends_with('_var_explained'), -uncertainty)
clusts_agg <- gather(clusts_agg, indicator, value, -class) %>% mutate(value = round(value, 2))
clusts_agg <- clusts_agg %>% mutate(class = recode(class, `1` = "Периферия", `2` = 'Перегретые лидеры', `3` = 'Сбалансированные лидеры', `4` = 'Сателлиты'))
# function
plotting <- function(x) {return(g1 <- ggplot(x, aes(x = indicator, y = value, fill = factor(indicator), label = value)) + geom_bar(stat = 'identity', alpha = 0.6) + geom_text(vjust = -0.5, size = 3) + theme_minimal() + labs(x = NULL, y = NULL) + theme(legend.position = 'none', legend.text = element_text(size = 8), axis.text.x = element_text(size = 7)))}
results <- clusts_agg %>% slice_rows('class') %>% by_slice(plotting)
grid.arrange(results$.out[[1]] + ggtitle(results$class[[1]]),
results$.out[[2]] + ggtitle(paste0(results$class[[2]])),
results$.out[[3]] + ggtitle(paste0(results$class[[3]])),
results$.out[[4]] + ggtitle(paste0(results$class[[4]])),
ncol = 2, nrow = 2)
require(installr)
updateR()
install.packages('installr')
install.packages('installr')
library(installr)
updateR()
setwd('~/GitHub/Progs/OpenData_March_2017')
library(slidify)
library(slidifyLibraries)
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
library(wbstats)
str(wb_cachelist, max.level = 1)
wb_cachelist %>% View()
library(tidyverse)
wb_cachelist %>% View()
wb_cachelist$indicators[1:10]
wb_cachelist$indicators[1:10, ]
wb_cachelist$indicators[1:2, ]
devtools::install_github('mingjerli/IMFData')
library(IMFData)
databaseID <- "IFS"
startdate = "2001-01-01"
enddate = "2016-12-31"
checkquery = FALSE
## Germany, Norminal GDP in Euros, Norminal GDP in National Currency
queryfilter <- list(CL_FREA = "", CL_AREA_IFS = "GR", CL_INDICATOR_IFS = c("NGDP_EUR",
"NGDP_XDC"))
GR.NGDP.query <- CompactDataMethod(databaseID, queryfilter, startdate, enddate,
checkquery)
GR.NGDP.query <- CompactDataMethod(databaseID, queryfilter, startdate, enddate,
checkquery)
GR.NGDP.query$Obs[[1]][1:5, ]
rmarkdown::shiny_prerendered_clean('index.Rmd')
GR.NGDP.query$Obs[[1]][1:5, ]
FSI.available.codes <- DataStructureMethod("FSI")
names(FSI.available.codes)
CodeSearch(FSI.available.codes, "CL_INDICATOR_FSI", "inflation")
CodeSearch(FSI.available.codes, "CL_INDICATOR_FSI", "stability")
FSI.available.codes[[3]]
FSI.available.codes[[3]] %>% View()
CodeSearch(FSI.available.codes, "CL_INDICATOR_FSI", "debt")
CodeSearch(FSI.available.codes, "CL_INDICATOR_FSI", "Real")
CodeSearch(FSI.available.codes, "CL_INDICATOR_FSI", "Debt")
CodeSearch(FSI.available.codes, "CL_INDICATOR_FSI", "Debt")[6, ]
queryfilter <- list(CL_FREA = "", CL_AREA_IFS = "GR", CL_INDICATOR_IFS = c("NGDP_EUR",
"NGDP_XDC"))
queryfilter <- list(CL_FREQ = "", CL_AREA_IFS = "GR", CL_INDICATOR_IFS = c("NGDP_EUR",
"NGDP_XDC"))
GR.NGDP.query <- CompactDataMethod(databaseID, queryfilter, startdate, enddate,
checkquery)
GR.NGDP.query$Obs[[1]][1:5, ]
queryfilter <- list(CL_FREQ = "A", CL_AREA_FSI = "RU", CL_INDICATOR_FSI = "FSDHG_XDC")
indicator_query <- CompactDataMethod(databaseID, queryfilter, startdate, enddate, checkquery)
queryfilter <- list(CL_FREQ = "", CL_AREA_FSI = "RU", CL_INDICATOR_FSI = "FSDHG_XDC")
indicator_query <- CompactDataMethod(databaseID, queryfilter, startdate, enddate, checkquery)
queryfilter <- list(CL_FREQ = "", CL_AREA_FSI = "RU", CL_INDICATOR_FSI = "FSHG_PT")
databaseID <- "FSI"
startdate = "2015-01-01"
enddate = "2016-12-31"
checkquery = FALSE
queryfilter <- list(CL_FREQ = "", CL_AREA_FSI = "RU", CL_INDICATOR_FSI = "FSHG_PT")
indicator_query <- CompactDataMethod(databaseID, queryfilter, startdate, enddate, checkquery)
indicator_query[[1]][1:5, ]
indicator_query[1:5, ]
str(indicator_query)
indicator_query$Obs[[1]][1:5, ]
indicator_query$Obs[[1]]
indicator_query$Obs[[2]]
g <- ggplot(indicator_query$Obs[[2]], aes(x = `@TIME_PERIOD`, y = `@OBS_VALUE`)) + geom_line(size = 1)
g <- g + labs(x = NULL, y = NULL)
g <- g + guides(colour = guide_legend(title = '', size = 3.5))
g <- g + theme_minimal()
g <- g + scale_colour_brewer(palette = 'Set2')
g <- g + theme(legend.position = 'top')
g
databaseID <- "FSI"
startdate = "2000-01-01"
enddate = "2016-12-31"
checkquery = FALSE
queryfilter <- list(CL_FREQ = "", CL_AREA_FSI = "RU", CL_INDICATOR_FSI = "FSHG_PT")
indicator_query <- CompactDataMethod(databaseID, queryfilter, startdate, enddate, checkquery)
indicator_query$Obs[[1]]
g <- ggplot(indicator_query$Obs[[1]], aes(x = `@TIME_PERIOD`, y = `@OBS_VALUE`)) + geom_line(size = 1)
g <- g + labs(x = NULL, y = NULL)
g <- g + guides(colour = guide_legend(title = '', size = 3.5))
g <- g + theme_minimal()
g <- g + scale_colour_brewer(palette = 'Set2')
g <- g + theme(legend.position = 'top')
g
str(indicator_query$Obs[[1]])
g <- ggplot(indicator_query$Obs[[1]], aes(x = as.factor(`@TIME_PERIOD`), y = `@OBS_VALUE`)) + geom_line(size = 1)
g <- g + labs(x = NULL, y = NULL)
g <- g + guides(colour = guide_legend(title = '', size = 3.5))
g <- g + theme_minimal()
g <- g + scale_colour_brewer(palette = 'Set2')
g <- g + theme(legend.position = 'top')
g
g <- ggplot(indicator_query$Obs[[1]], aes(x = as.factor(`@TIME_PERIOD`), y = `@OBS_VALUE`)) + geom_line(size = 1)
g <- g + labs(x = NULL, y = NULL)
g <- g + guides(colour = guide_legend(title = '', size = 3.5))
g <- g + theme_minimal()
g <- g + theme(legend.position = 'top')
g
g <- ggplot(indicator_query$Obs[[1]], aes(x = as.factor(`@TIME_PERIOD`), y = `@OBS_VALUE`, group = NULL)) + geom_line(size = 1)
g <- g + labs(x = NULL, y = NULL)
g <- g + guides(colour = guide_legend(title = '', size = 3.5))
g <- g + theme_minimal()
g <- g + theme(legend.position = 'top')
g
g <- ggplot(indicator_query$Obs[[1]], aes(x = `@TIME_PERIOD`, y = as.numeric(`@OBS_VALUE`))) + geom_line(size = 1)
g <- g + labs(x = NULL, y = NULL)
g <- g + guides(colour = guide_legend(title = '', size = 3.5))
g <- g + theme_minimal()
g <- g + theme(legend.position = 'top')
g
as.Date('2014', 'Y')
?as.Date
as.Date('2014', '%Y')
g <- ggplot(indicator_query$Obs[[1]], aes(x = `@TIME_PERIOD`, y = as.Date(`@OBS_VALUE`, '%Y'))) + geom_line(size = 1)
g <- g + labs(x = NULL, y = NULL)
g <- g + guides(colour = guide_legend(title = '', size = 3.5))
g <- g + theme_minimal()
g <- g + theme(legend.position = 'top')
g
g <- ggplot(indicator_query$Obs[[1]], aes(x = as.Date(`@TIME_PERIOD`, '%Y'), y = as.numeric(`@OBS_VALUE`))) + geom_line(size = 1)
g <- g + labs(x = NULL, y = NULL)
g <- g + guides(colour = guide_legend(title = '', size = 3.5))
g <- g + theme_minimal()
g <- g + theme(legend.position = 'top')
g
library(slidify)
getwd()
slidify('index.Rmd')
slidify('index.Rmd')

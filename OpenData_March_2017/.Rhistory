?scale
install.packages(c('tidyverse', 'lubridate', 'rvest', 'stringr'))
install.packages(c('XML', 'xml2', 'openxlsx'))
install.packages('devtools')
install.packages(c('repr', 'IRdisplay', 'crayon', 'pbdZMQ', 'devtools'))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()  # to register the kernel in the current R installation
install.packages(c('purrr', 'data.table', 'corrr', 'zoo', 'forecast'))
install_github("ggobi/ggally")
library(devtools)
install_github("ggobi/ggally")
devtools::install_github("slowkow/ggrepel")
install.packages('pander')
install.packages('xts')
install.packages('ggforce')
today()
Sys.Date()
library(httr)
library(jsonlite)
start_date <- Sys.Date()
# или
# start_date <- Sys.Date() - 100
####################################
## FUNCTION TO DOWNLOAD
####################################
get_cbonds_index <- function(index_group_id, index_type_id, start_date, limit = 100, operator = 'gt') {
connection_type <- 'get_index_value'
base_url <- paste0('https://rest.cbonds.info/services/json/', connection_type, '/?login=test&password=test&lang=rus&cache_all_revalidate=0&nocache_all=0')
body <- toJSON(fromJSON(paste0('{"auth":{"login":"test","password":"test"},"filters":[{"field":"index_group_id","operator":"eq","value":',
as.character(index_group_id), '},{"field":"type_id","operator":"eq","value":',
as.character(index_type_id), '},{"field":"date","operator":"',
operator, '","value":"',
start_date, '"}],"quantity":{"limit":',
as.character(limit), ',"offset":0},"sorting":[{"field":"date","order":"asc"}]}')),
pretty = TRUE)
res <- POST(base_url, encode = 'form', body = body)
content <- httr::content(res, as = "text")
content <- fromJSON(content)
if (content$count == 0) {
cat('Cbonds: There is no data available for current request.\nPlease, verify parameters:\nindex_group_id, index_type_id and start_date.')
return(0)
}
if (content$meta$user_id == 33) {
cat('Cbonds: Problems with server authentification.\nPlease, verify problem details with Cbonds Client Service:\nsnv@cbonds.info')
return(0)
}
else {
return(content$items)
}
}
ifx_ytm <- get_cbonds_index(index_group_id = 13, index_type_id = 10, start_date = '2017-01-31', limit = 100, operator = 'gt')
content$count
connection_type <- 'get_index_value'
base_url <- paste0('https://rest.cbonds.info/services/json/', connection_type, '/?login=test&password=test&lang=rus&cache_all_revalidate=0&nocache_all=0')
body <- toJSON(fromJSON(paste0('{"auth":{"login":"test","password":"test"},"filters":[{"field":"index_group_id","operator":"eq","value":',
as.character(index_group_id), '},{"field":"type_id","operator":"eq","value":',
as.character(index_type_id), '},{"field":"date","operator":"',
operator, '","value":"',
start_date, '"}],"quantity":{"limit":',
as.character(limit), ',"offset":0},"sorting":[{"field":"date","order":"asc"}]}')),
pretty = TRUE)
index_group_id = 13
index_type_id = 10
start_date = '2017-01-31'
limit = 100
operator = 'gt'
body <- toJSON(fromJSON(paste0('{"auth":{"login":"test","password":"test"},"filters":[{"field":"index_group_id","operator":"eq","value":',
as.character(index_group_id), '},{"field":"type_id","operator":"eq","value":',
as.character(index_type_id), '},{"field":"date","operator":"',
operator, '","value":"',
start_date, '"}],"quantity":{"limit":',
as.character(limit), ',"offset":0},"sorting":[{"field":"date","order":"asc"}]}')),
pretty = TRUE)
res <- POST(base_url, encode = 'form', body = body)
content <- httr::content(res, as = "text")
content <- fromJSON(content)
content$count
content$count == 0
get_cbonds_index <- function(index_group_id, index_type_id, start_date, limit = 100, operator = 'gt') {
connection_type <- 'get_index_value'
base_url <- paste0('https://rest.cbonds.info/services/json/', connection_type, '/?login=annapestova%40forecast.ru&password=cmasf2008&lang=rus&cache_all_revalidate=0&nocache_all=0')
body <- toJSON(fromJSON(paste0('{"auth":{"login":"annapestova@forecast.ru","password":"cmasf2008"},"filters":[{"field":"index_group_id","operator":"eq","value":',
as.character(index_group_id), '},{"field":"type_id","operator":"eq","value":',
as.character(index_type_id), '},{"field":"date","operator":"',
operator, '","value":"',
start_date, '"}],"quantity":{"limit":',
as.character(limit), ',"offset":0},"sorting":[{"field":"date","order":"asc"}]}')),
pretty = TRUE)
res <- POST(base_url, encode = 'form', body = body)
content <- httr::content(res, as = "text")
content <- fromJSON(content)
if (content$count == 0) {
cat('Cbonds: There is no data available for current request.\nPlease, verify parameters:\nindex_group_id, index_type_id and start_date.')
return(0)
}
if (content$meta$user_id == 33) {
cat('Cbonds: Problems with server authentification.\nPlease, verify problem details with Cbonds Client Service:\nsnv@cbonds.info')
return(0)
}
else {
return(content$items)
}
}
ifx_ytm <- get_cbonds_index(index_group_id = 13, index_type_id = 10, start_date = '2017-01-31', limit = 100, operator = 'gt')
library(wbstats)
library(ggplot2)
oil_data <- wb(indicator = c("CRUDE_DUBAI", "CRUDE_BRENT", "CRUDE_WTI", "CRUDE_PETRO"),
startdate = "2012M01", enddate = "2014M12", freq = "M", POSIXct = TRUE)
ggplot(oil_data, aes(x = date_ct, y = value, colour = indicator)) + geom_line(size = 1) +
labs(title = "Crude Oil Price Comparisons", x = "Date", y = "US Dollars")
library(wbstats)
library(ggplot2)
oil_data <- wb(indicator = c("CRUDE_DUBAI", "CRUDE_BRENT", "CRUDE_WTI", "CRUDE_PETRO"),
startdate = "2012M01", enddate = "2014M12", freq = "M", POSIXct = TRUE)
ggplot(oil_data, aes(x = date_ct, y = value, colour = indicator)) + geom_line(size = 1) +
labs(title = "Crude Oil Price Comparisons", x = "Date", y = "US Dollars")
library(wbstats)
library(ggplot2)
wbsearch(pattern = "inflation", fields = "indicator", extra = TRUE)
#             indicatorID                             indicator
# 8294  NY.GDP.DEFL.KD.ZG    Inflation, GDP deflator (annual %)
# 10895    FP.CPI.TOTL.ZG Inflation, consumer prices (annual %)
deflator <- wb(indicator = "NY.GDP.DEFL.KD.ZG", country = "RU", mrv = 16, freq = "Y", POSIXct = TRUE)
CPI <- wb(indicator = "FP.CPI.TOTL.ZG", country = "RU", mrv = 16, freq = "Y", POSIXct = TRUE)
inflation_data <- rbind(deflator, CPI)
g <- ggplot(inflation_data, aes(x = date_ct, y = value, colour = indicator)) + geom_line(size = 1)
g <- g + labs(title = "Inflation data", x = NULL, y = NULL)
g <- g + guides(colour = guide_legend(title = '', size = 3.5))
g <- g + theme_minimal()
g <- g + scale_colour_brewer(palette = 'Set2')
g <- g + theme(legend.position = 'top')
g
library(ggthemes)
g <- ggplot(inflation_data, aes(x = date_ct, y = value, colour = indicator)) + geom_line(size = 1)
g <- g + labs(title = "Inflation data", x = NULL, y = NULL)
g <- g + guides(colour = guide_legend(title = '', size = 3.5))
g <- g + theme_solarized()
g <- g + scale_colour_solarized()
g <- g + theme(legend.position = 'top')
g
g <- ggplot(inflation_data, aes(x = date_ct, y = value, colour = indicator)) + geom_line(size = 1)
g <- g + labs(title = "Inflation data", x = NULL, y = NULL)
g <- g + guides(colour = guide_legend(title = '', size = 3.5))
g <- g + theme_solarized()
g <- g + scale_colour_solarized("blue")
g <- g + theme(legend.position = 'top')
g
library(IMFData)
library(ggplot2)
availableDB$DatabaseID
# FSI
# "Financial Soundness Indicators (FSI)"
FSI.available.codes <- DataStructureMethod("FSI")
names(FSI.available.codes)
# [1] "CL_FREQ"          "CL_AREA_FSI"      "CL_INDICATOR_FSI"
CodeSearch(FSI.available.codes, "CL_INDICATOR_FSI", "stability")
CodeSearch(FSI.available.codes, "CL_INDICATOR_FSI", "Debt")
# FSHG_PT
# Financial Soundness Indicators, Encouraged Set, Households, Household Debt to Gross Domestic Product (GDP), Percent
databaseID <- "FSI"
startdate = "2000-01-01"
enddate = "2016-12-31"
checkquery = FALSE
queryfilter <- list(CL_FREQ = "", CL_AREA_FSI = "RU", CL_INDICATOR_FSI = "FSHG_PT")
indicator_query <- CompactDataMethod(databaseID, queryfilter, startdate, enddate, checkquery)
indicator_query$Obs[[1]]
g <- ggplot(indicator_query$Obs[[1]], aes(x = `@TIME_PERIOD`, y = `@OBS_VALUE`)) + geom_line(size = 1)
g <- g + labs(title = "Inflation data", x = NULL, y = NULL)
g <- g + guides(colour = guide_legend(title = '', size = 3.5))
g <- g + theme_solarized()
g <- g + theme(legend.position = 'top')
g
as.Date(`@TIME_PERIOD`, '%Y')
as.Date(indicator_query$Obs[[1]]$`@TIME_PERIOD`, '%Y')
g <- ggplot(indicator_query$Obs[[1]], aes(x = as.Date(`@TIME_PERIOD`, '%Y'), y = `@OBS_VALUE`)) + geom_line(size = 1)
g <- g + labs(title = "Inflation data", x = NULL, y = NULL)
g <- g + guides(colour = guide_legend(title = '', size = 3.5))
g <- g + theme_solarized()
g <- g + theme(legend.position = 'top')
g
g <- ggplot(indicator_query$Obs[[1]], aes(x = as.Date(indicator_query$Obs[[1]]$`@TIME_PERIOD`, '%Y'), y = `@OBS_VALUE`)) + geom_line(size = 1)
g <- g + labs(title = "Inflation data", x = NULL, y = NULL)
g <- g + guides(colour = guide_legend(title = '', size = 3.5))
g <- g + theme_solarized()
g <- g + theme(legend.position = 'top')
g
g <- ggplot(indicator_query$Obs[[1]], aes(x = as.Date(`@TIME_PERIOD`, '%Y'), y = as.numeric(`@OBS_VALUE`))) + geom_line(size = 1)
g <- g + labs(title = "Inflation data", x = NULL, y = NULL)
g <- g + guides(colour = guide_legend(title = '', size = 3.5))
g <- g + theme_solarized()
g <- g + theme(legend.position = 'top')
g
library(slidify)
library(slidifyLibraries)
setwd('~/GitHub/Progs/OpenData_March_2017')
slidify('index.Rmd')
slidify('index.Rmd')
